{"version":3,"sources":["audio/sound.mp3","timer/index.js","timer/Timer.jsx","countdown/EnterTime.jsx","countdown/PrintResult.jsx","countdown/Countdown.jsx","countdown/index.js","app/App.jsx","index.jsx"],"names":["module","exports","Timer","props","changeTime","value","state","isRunning","timeFromLastAnimate","pauseTime","time","Date","now","setState","requestAnimationFrame","toggleTimer","evt","preventDefault","resetTimer","conversionTime","data","this","date","min","getMinutes","sec","getSeconds","ms","getMilliseconds","className","onClick","React","Component","EnterTime","giveTime","setTime","sliderChange","Math","floor","minChange","secChange","isDisable","onChange","disabled","max","step","normalizeTime","PrintResult","percent","startTime","currentTime","round","type","initialState","Countdown","newtimerId","setTimeout","timerId","Audio","sound","play","toggleCountdown","clearTimeout","resetCountdown","TabPane","Tabs","App","tab","key","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.981f32e7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sound.76b2ec11.mp3\";","import Timer from './Timer';\n\nexport default Timer;\n","import React from 'react';\r\nimport { Button } from 'antd';\r\n\r\nimport './timer.scss';\r\n\r\nclass Timer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      time: 0,\r\n      isRunning: false,\r\n      pauseTime: 0,\r\n      timeFromLastAnimate: 0,\r\n    };\r\n  }\r\n\r\n  changeTime = value => {\r\n    const { isRunning, timeFromLastAnimate } = this.state;\r\n    const diff = value - timeFromLastAnimate;\r\n    // если прошло больше 150 мс\r\n    if (diff > 150 && isRunning) {\r\n      const { pauseTime } = this.state;\r\n      const time = Date.now() - pauseTime; // получаем текущее время у учетом времени паузы\r\n      this.setState({ time, timeFromLastAnimate: value }); // меняем стейт на новый\r\n    }\r\n    if (isRunning) {\r\n      requestAnimationFrame(this.changeTime);\r\n    }\r\n  };\r\n\r\n  toggleTimer = evt => {\r\n    evt.preventDefault();\r\n    const { isRunning, time } = this.state;\r\n    if (!isRunning) {\r\n      this.setState(\r\n        {\r\n          pauseTime: Date.now() - time,\r\n          isRunning: true,\r\n        },\r\n        () => requestAnimationFrame(this.changeTime)\r\n      );\r\n    } else {\r\n      this.setState({ isRunning: false, timeFromLastAnimate: 0 });\r\n    }\r\n  };\r\n\r\n  resetTimer = evt => {\r\n    evt.preventDefault();\r\n    this.setState({\r\n      time: 0,\r\n      isRunning: false,\r\n      timeFromLastAnimate: 0,\r\n    });\r\n  };\r\n\r\n  conversionTime = data => (data < 10 ? `0${data}` : data);\r\n\r\n  render() {\r\n    const { time, isRunning } = this.state;\r\n    const date = new Date(time); // создаем объект дата чтобы получить мин сек и мс\r\n    const min = this.conversionTime(date.getMinutes()); // получаем мин\r\n    const sec = this.conversionTime(date.getSeconds()); // получаем сек\r\n    const ms = date.getMilliseconds() || '00'; // получаем мс\r\n\r\n    return (\r\n      <div className=\"timer\">\r\n        <ul className=\"timer__list\">\r\n          <li className=\"timer__item\">\r\n            <span>min</span>\r\n            <span>{min}</span>\r\n          </li>\r\n          <li className=\"timer__item\">\r\n            <span>sec</span>\r\n            <span>{sec}</span>\r\n          </li>\r\n          <li className=\"timer__item\">\r\n            <span>ms</span>\r\n            <span>{ms}</span>\r\n          </li>\r\n        </ul>\r\n        <div className=\"btn-group\">\r\n          <Button className=\"btn--timer\" onClick={this.toggleTimer}>\r\n            {isRunning ? 'Pause' : 'Run'}\r\n          </Button>\r\n          <Button className=\"btn--timer\" onClick={this.resetTimer}>\r\n            Reset\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Timer;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Slider, InputNumber } from 'antd';\r\n\r\nclass EnterTime extends React.Component {\r\n  giveTime = (min, sec) => {\r\n    const { setTime } = this.props;\r\n    setTime(min, sec);\r\n  };\r\n\r\n  sliderChange = value => {\r\n    const min = Math.floor(value / 60); // округляем до минут\r\n    const sec = value - min * 60; // получаем секунды\r\n    this.giveTime(min, sec);\r\n  };\r\n\r\n  minChange = min => {\r\n    const { sec } = this.props; // получаем секунды из пропсов\r\n    min > 720 ? this.giveTime(719, 59) : this.giveTime(min, sec); // если ввели больше 720 мин\r\n  };\r\n\r\n  secChange = sec => {\r\n    const { min } = this.props; // получаем минуты из пропсов\r\n    this.giveTime(min, sec);\r\n  };\r\n\r\n  render() {\r\n    const { min, sec, isDisable } = this.props;\r\n    return (\r\n      <div>\r\n        MIN\r\n        <InputNumber value={min} onChange={this.minChange} disabled={isDisable} max={719} min={0} />\r\n        SEC\r\n        <InputNumber value={sec} onChange={this.secChange} disabled={isDisable} max={59} min={0} />\r\n        <Slider\r\n          value={min * 60 + sec}\r\n          onChange={this.sliderChange}\r\n          disabled={isDisable}\r\n          step={15}\r\n          min={0}\r\n          max={3600}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nEnterTime.propTypes = {\r\n  min: PropTypes.number,\r\n  sec: PropTypes.number,\r\n  isDisable: PropTypes.bool,\r\n  setTime: PropTypes.func,\r\n};\r\n\r\nexport default EnterTime;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Progress } from 'antd';\r\n\r\nimport './countdown.scss';\r\n\r\nconst normalizeTime = data => (data < 10 ? `0${data}` : data);\r\n\r\nconst PrintResult = props => {\r\n  const { startTime, currentTime } = props;\r\n  let percent;\r\n  let min = 0;\r\n  let sec = 0;\r\n  let ms = '000';\r\n\r\n  if (startTime === 0) {\r\n    percent = 0;\r\n  } else {\r\n    percent = 100 - Math.round((currentTime / (startTime * 1000)) * 100);\r\n    const time = new Date(currentTime);\r\n    min = time.getMinutes();\r\n    sec = time.getSeconds();\r\n    ms = time.getMilliseconds();\r\n  }\r\n\r\n  return (\r\n    <div className=\"result-countdown\">\r\n      <div>\r\n        Time to end {normalizeTime(min)} : {normalizeTime(sec)}: {ms}\r\n      </div>\r\n      <Progress type=\"circle\" percent={percent} />\r\n    </div>\r\n  );\r\n};\r\n\r\nPrintResult.propTypes = {\r\n  startTime: PropTypes.number,\r\n  currentTime: PropTypes.number,\r\n};\r\n\r\nexport default PrintResult;\r\n","import React from 'react';\r\nimport { Button } from 'antd';\r\n\r\nimport EnterTime from './EnterTime';\r\nimport PrintResult from './PrintResult';\r\n\r\nimport sound from '../audio/sound.mp3';\r\n\r\nimport './countdown.scss';\r\n\r\nconst initialState = {\r\n  isRunning: false,\r\n  isDisable: false,\r\n  min: 0,\r\n  sec: 0,\r\n  startTime: 0,\r\n};\r\n\r\nclass Countdown extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { ...initialState };\r\n  }\r\n\r\n  setTime = (min, sec) => {\r\n    const time = min * 60 + sec;\r\n    this.setState({ time: time * 1000, min, sec });\r\n  };\r\n\r\n  changeTime = () => {\r\n    const { startTime } = this.state;\r\n    if (startTime > Date.now()) {\r\n      const newtimerId = setTimeout(() => this.changeTime(), 1000);\r\n      this.setState({ timerId: newtimerId });\r\n    } else {\r\n      const audio = new Audio(sound);\r\n      audio.play();\r\n      this.setState({ ...initialState });\r\n    }\r\n  };\r\n\r\n  toggleCountdown = evt => {\r\n    evt.preventDefault();\r\n    const { isRunning } = this.state;\r\n    if (!isRunning) {\r\n      const { time = 0 } = this.state;\r\n      const currentTime = Date.now();\r\n      const startTime = currentTime + time;\r\n\r\n      if (startTime === currentTime) {\r\n        return;\r\n      }\r\n      this.setState(\r\n        {\r\n          isRunning: true,\r\n          isDisable: true,\r\n          startTime,\r\n        },\r\n        () => this.changeTime()\r\n      );\r\n    } else {\r\n      const { timerId, startTime } = this.state;\r\n      clearTimeout(timerId);\r\n      this.setState({ isRunning: false, time: startTime - Date.now(), timerId: null });\r\n    }\r\n  };\r\n\r\n  resetCountdown = evt => {\r\n    evt.preventDefault();\r\n    const { timerId } = this.state;\r\n    clearTimeout(timerId);\r\n    this.setState({ ...initialState, time: 0, timerId: null });\r\n  };\r\n\r\n  render() {\r\n    const { startTime, isRunning, min, sec, isDisable } = this.state;\r\n    return (\r\n      <div className=\"countdown\">\r\n        <EnterTime setTime={this.setTime} isDisable={isDisable} min={min} sec={sec} />\r\n        <div className=\"btn-countdown\">\r\n          <Button onClick={this.toggleCountdown}>{isRunning ? 'Pause' : 'Run'}</Button>\r\n          <Button onClick={this.resetCountdown}>Reset</Button>\r\n        </div>\r\n        <br />\r\n        <PrintResult\r\n          startTime={isDisable ? min * 60 + sec : 0}\r\n          currentTime={isDisable ? startTime - Date.now() : 0}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Countdown;\r\n","import Countdown from './Countdown';\n\nexport default Countdown;\n","import React from 'react';\r\nimport { Tabs } from 'antd';\r\nimport Timer from '../timer';\r\nimport Countdown from '../countdown';\r\n\r\nimport './app.css';\r\nimport 'antd/dist/antd.css';\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nconst App = () => (\r\n  <Tabs type=\"card\">\r\n    <TabPane tab=\"Timer\" key=\"1\">\r\n      <Timer />\r\n    </TabPane>\r\n    <TabPane tab=\"Countdown\" key=\"2\">\r\n      <Countdown />\r\n    </TabPane>\r\n  </Tabs>\r\n);\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './app/App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}